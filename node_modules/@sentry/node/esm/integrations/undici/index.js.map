{"version":3,"file":"index.js","sources":["../../../../src/integrations/undici/index.ts"],"sourcesContent":["import type { Hub } from '@sentry/core';\nimport type { EventProcessor, Integration } from '@sentry/types';\nimport {\n  dynamicRequire,\n  dynamicSamplingContextToSentryBaggageHeader,\n  parseSemver,\n  stringMatchesSomePattern,\n  stripUrlQueryAndFragment,\n} from '@sentry/utils';\n\nimport type { NodeClient } from '../../client';\nimport { isSentryRequest } from '../utils/http';\nimport type { DiagnosticsChannel, RequestCreateMessage, RequestEndMessage, RequestErrorMessage } from './types';\n\nconst NODE_VERSION = parseSemver(process.versions.node);\n\nexport enum ChannelName {\n  // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md#undicirequestcreate\n  RequestCreate = 'undici:request:create',\n  RequestEnd = 'undici:request:headers',\n  RequestError = 'undici:request:error',\n}\n\nexport interface UndiciOptions {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs: boolean;\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest: (url: string) => boolean;\n}\n\n// Please note that you cannot use `console.log` to debug the callbacks registered to the `diagnostics_channel` API.\n// To debug, you can use `writeFileSync` to write to a file:\n// https://nodejs.org/api/async_hooks.html#printing-in-asynchook-callbacks\n\n/**\n * Instruments outgoing HTTP requests made with the `undici` package via\n * Node's `diagnostics_channel` API.\n *\n * Supports Undici 4.7.0 or higher.\n *\n * Requires Node 16.17.0 or higher.\n */\nexport class Undici implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Undici';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Undici.id;\n\n  private readonly _options: UndiciOptions;\n\n  public constructor(_options: Partial<UndiciOptions> = {}) {\n    this._options = {\n      breadcrumbs: _options.breadcrumbs === undefined ? true : _options.breadcrumbs,\n      shouldCreateSpanForRequest: _options.shouldCreateSpanForRequest || (() => true),\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    // Requires Node 16+ to use the diagnostics_channel API.\n    if (NODE_VERSION.major && NODE_VERSION.major < 16) {\n      return;\n    }\n\n    let ds: DiagnosticsChannel | undefined;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      ds = dynamicRequire(module, 'diagnostics_channel') as DiagnosticsChannel;\n    } catch (e) {\n      // no-op\n    }\n\n    if (!ds || !ds.subscribe) {\n      return;\n    }\n\n    // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md\n    ds.subscribe(ChannelName.RequestCreate, message => {\n      const hub = getCurrentHub();\n      if (!hub.getIntegration(Undici)) {\n        return;\n      }\n\n      const { request } = message as RequestCreateMessage;\n\n      const url = new URL(request.path, request.origin);\n      const stringUrl = url.toString();\n\n      if (isSentryRequest(stringUrl) || request.__sentry__ !== undefined) {\n        return;\n      }\n\n      const client = hub.getClient<NodeClient>();\n      const scope = hub.getScope();\n\n      const activeSpan = scope.getSpan();\n\n      if (activeSpan && client) {\n        const clientOptions = client.getOptions();\n        const shouldCreateSpan = this._options.shouldCreateSpanForRequest(stringUrl);\n\n        if (shouldCreateSpan) {\n          const data: Record<string, unknown> = {};\n          const params = url.searchParams.toString();\n          if (params) {\n            data['http.query'] = `?${params}`;\n          }\n          if (url.hash) {\n            data['http.fragment'] = url.hash;\n          }\n\n          const span = activeSpan.startChild({\n            op: 'http.client',\n            description: `${request.method || 'GET'} ${stripUrlQueryAndFragment(stringUrl)}`,\n            data,\n          });\n          request.__sentry__ = span;\n\n          const shouldPropagate = clientOptions.tracePropagationTargets\n            ? stringMatchesSomePattern(stringUrl, clientOptions.tracePropagationTargets)\n            : true;\n\n          if (shouldPropagate) {\n            request.addHeader('sentry-trace', span.toTraceparent());\n            if (span.transaction) {\n              const dynamicSamplingContext = span.transaction.getDynamicSamplingContext();\n              const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext);\n              if (sentryBaggageHeader) {\n                request.addHeader('baggage', sentryBaggageHeader);\n              }\n            }\n          }\n        }\n      }\n    });\n\n    ds.subscribe(ChannelName.RequestEnd, message => {\n      const hub = getCurrentHub();\n      if (!hub.getIntegration(Undici)) {\n        return;\n      }\n\n      const { request, response } = message as RequestEndMessage;\n\n      const url = new URL(request.path, request.origin);\n      const stringUrl = url.toString();\n\n      if (isSentryRequest(stringUrl)) {\n        return;\n      }\n\n      const span = request.__sentry__;\n      if (span) {\n        span.setHttpStatus(response.statusCode);\n        span.finish();\n      }\n\n      if (this._options.breadcrumbs) {\n        hub.addBreadcrumb(\n          {\n            category: 'http',\n            data: {\n              method: request.method,\n              status_code: response.statusCode,\n              url: stringUrl,\n            },\n            type: 'http',\n          },\n          {\n            event: 'response',\n            request,\n            response,\n          },\n        );\n      }\n    });\n\n    ds.subscribe(ChannelName.RequestError, message => {\n      const hub = getCurrentHub();\n      if (!hub.getIntegration(Undici)) {\n        return;\n      }\n\n      const { request } = message as RequestErrorMessage;\n\n      const url = new URL(request.path, request.origin);\n      const stringUrl = url.toString();\n\n      if (isSentryRequest(stringUrl)) {\n        return;\n      }\n\n      const span = request.__sentry__;\n      if (span) {\n        span.setStatus('internal_error');\n        span.finish();\n      }\n\n      if (this._options.breadcrumbs) {\n        hub.addBreadcrumb(\n          {\n            category: 'http',\n            data: {\n              method: request.method,\n              url: stringUrl,\n            },\n            level: 'error',\n            type: 'http',\n          },\n          {\n            event: 'error',\n            request,\n          },\n        );\n      }\n    });\n  }\n}\n"],"names":[],"mappings":"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"}